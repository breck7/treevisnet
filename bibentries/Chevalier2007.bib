@INPROCEEDINGS{Chevalier2007,
  author = {Fanny Chevalier and David Auber and Alexandru Telea},
  title = {Structural Analysis and Visualization of {C}++ Code Evolution using Syntax Trees},
  pages = {90--97},
  abstract = {We present a method to detect and visualize evolution patterns in C++ source code. Our method consists of three steps. First, we extract an annotated syntax tree (AST) from each version of a given C++ source code. Next, we hash the extracted syntax nodes based on a metric combining structure and type information, and construct matches (correspondences) between similar-hash subtrees. Our technique detects code fragments which have not changed, or changed little, during the software evolution. By parameterizing the similarity metric, we can flexibly decide what is considered to be identical or not during the software evolution. Finally, we visualize the evolution of the code structure by emphasizing both changing and constant code patterns. We demonstrate our technique on a versioned code base containing a variety of changes ranging from simple to complex.},
  doi = {10.1145/1294948.1294971},
  year = {2007},
  booktitle = {IWPSE'07: Proceedings of the International workshop on Principles of Software Evolution},
  editor = {Massimiliano Di Penta and Michele Lanza},
  publisher = {ACM Press},
  isbn = {9781595937223}
}
